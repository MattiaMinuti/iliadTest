#!/bin/bash

# Gestionale Iliad Pre-commit Hook
# This hook runs quality checks on modified files

echo "üß™ Running pre-commit tests..."

# Load environment variables
if [ -f "env.local" ]; then
    source env.local
fi

# Check if we're on main branch
CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
if [ "$CURRENT_BRANCH" = "main" ]; then
    echo "üéØ On main branch - running quality checks..."
    
    # Check for backend files
    BACKEND_FILES=$(git diff --cached --name-only | grep -E '^be/.*\.(php)$')
    
    if [ -n "$BACKEND_FILES" ]; then
        echo "üìù Backend files modified:"
        echo "$BACKEND_FILES"
        echo ""
        
        # Check if backend is running
        BACKEND_URL="http://${BACKEND_HOST:-iliadApi}"
        if ! curl -s http://localhost:8000/ > /dev/null 2>&1 && ! curl -s "$BACKEND_URL/" > /dev/null 2>&1; then
            echo "‚ùå Backend is not running at http://localhost:8000 or $BACKEND_URL"
            echo "Please start the backend with: docker-compose up -d"
            echo ""
            echo "To skip this check, use: git commit --no-verify"
            exit 1
        fi
        
        echo "‚úÖ Backend is running, executing quality checks..."
        
        # Run code quality checks
        cd be
        
        # Check if PHP CS Fixer is available
        if [ ! -f "vendor/bin/php-cs-fixer" ]; then
            echo "‚ùå PHP CS Fixer is not installed"
            echo "Please run: composer install"
            exit 1
        fi
        
        echo "üé® Running PHP CS Fixer..."
        
        # Run PHP CS Fixer with auto-fix
        MODIFIED_PHP_FILES=$(echo "$BACKEND_FILES" | sed 's|^be/||')
        
        if [ -n "$MODIFIED_PHP_FILES" ]; then
            echo "üìÅ Processing files: $MODIFIED_PHP_FILES"
            
            # Run auto-fix first
            echo "üîß Running auto-fix..."
            vendor/bin/php-cs-fixer fix --config=.php-cs-fixer.php --allow-risky=yes $MODIFIED_PHP_FILES
            FIX_RESULT=$?
            
            if [ $FIX_RESULT -eq 0 ]; then
                echo "‚úÖ Code style auto-fix completed"
                
                # Check if any files were actually modified by the fixer
                MODIFIED_AFTER_FIX=$(git diff --name-only)
                if [ -n "$MODIFIED_AFTER_FIX" ]; then
                    echo "üìù Files were auto-fixed, adding them to commit..."
                    git add $MODIFIED_AFTER_FIX
                fi
            else
                echo "‚ö†Ô∏è  Some files could not be auto-fixed"
            fi
            
            # Now run a final check to ensure everything is correct
            echo "üîç Running final style check..."
            CS_FIXER_RESULT=0
            for file in $MODIFIED_PHP_FILES; do
                if [ -f "$file" ]; then
                    echo "  üîç Checking $file..."
                    vendor/bin/php-cs-fixer fix --config=.php-cs-fixer.php --allow-risky=yes --dry-run --diff $file
                    if [ $? -ne 0 ]; then
                        CS_FIXER_RESULT=1
                    fi
                fi
            done
            
            if [ $CS_FIXER_RESULT -eq 0 ]; then
                echo "‚úÖ All backend files pass style checks"
            else
                echo "‚ùå Some backend files have style issues"
                echo "Please fix the issues above or run: cd be && vendor/bin/php-cs-fixer fix"
                exit 1
            fi
        fi
        
        cd ..
    fi
    
    # Check for frontend files
    FRONTEND_FILES=$(git diff --cached --name-only | grep -E '^fe/.*\.(js|vue)$')
    
    if [ -n "$FRONTEND_FILES" ]; then
        echo "üìù Frontend files modified:"
        echo "$FRONTEND_FILES"
        echo ""
        
        # Check if frontend container is running
        if ! docker-compose ps frontend | grep -q "Up"; then
            echo "‚ùå Frontend container is not running"
            echo "Please start with: docker-compose up -d frontend"
            echo ""
            echo "To skip this check, use: git commit --no-verify"
            exit 1
        fi
        
        echo "‚úÖ Frontend container is running, executing quality checks..."
        
        # Run Prettier auto-fix and check
        echo "üé® Running Prettier auto-fix on frontend files..."
        MODIFIED_FRONTEND_FILES=$(echo "$FRONTEND_FILES" | sed 's|^fe/||')
        
        if [ -n "$MODIFIED_FRONTEND_FILES" ]; then
            echo "üìÅ Processing files: $MODIFIED_FRONTEND_FILES"
            
            # Run Prettier auto-fix first
            echo "üé® Running Prettier auto-fix..."
            docker-compose exec -T frontend npx prettier --write --ignore-path .prettierignore $MODIFIED_FRONTEND_FILES
            PRETTIER_FIX_RESULT=$?
            
            if [ $PRETTIER_FIX_RESULT -eq 0 ]; then
                echo "‚úÖ Prettier auto-fix completed"
                
                # Stage the fixed files
                echo "üìù Staging auto-fixed files..."
                git add $FRONTEND_FILES
                
                # Run final check to ensure everything is properly formatted
                echo "üîç Running final Prettier check..."
                docker-compose exec -T frontend npx prettier --check --ignore-path .prettierignore $MODIFIED_FRONTEND_FILES
                PRETTIER_CHECK_RESULT=$?
                
                if [ $PRETTIER_CHECK_RESULT -eq 0 ]; then
                    echo "‚úÖ All files properly formatted"
                else
                    echo "‚ùå Some files still need manual formatting"
                    echo "üí° Run: cd fe && npm run format"
                    exit 1
                fi
            else
                echo "‚ùå Prettier auto-fix failed"
                echo "üí° Run: cd fe && npm run format"
                exit 1
            fi
        echo "‚úÖ Frontend files formatting is correct"
        else
            echo "‚úÖ No frontend files to check"
        fi
    fi
    
    echo ""
    echo "üéâ All quality checks passed! Proceeding with commit..."
else
    echo "‚úÖ Not on main branch ($CURRENT_BRANCH), skipping quality checks"
fi

exit 0